package task_3;

public class Loader {
//    Создайте 5–7 кошек, вызовите у них различные методы:
//        1.	Выведите в консоль вес созданных кошек.
//        2.	Покормите двух кошек, после этого распечатайте их вес (убедитесь, что вес изменился).
//        3.	Перекормите кошку, чтобы ее статус стал Exploded.
//        4.	«Замяукайте» кошку до статуса Dead.
//        5.	Отправьте в репозиторий Git коммит с выполненным заданием.
//    Рекомендации
//    Чтобы перекормить или «замяукать» кошку, используйте цикл while с условием проверки статуса кошки.

//    1.	Создайте в классе Cat метод, который возвращает сумму съеденной еды текущей кошки.
//2.	Создайте в классе Cat метод «Сходить в туалет» pee(), который уменьшает вес кошки и что-нибудь печатает.
//        3.	Отправьте в репозиторий Git коммит с выполненным заданием.
//    Рекомендации
//    Протестируйте верную работу метода возврата съеденной еды:
//        •	Создайте кошку.
//        •	Покормите кошку кормом весом 150.00 граммов.
//•	Вызовите метод pee() несколько раз.
//        •	Распечатайте значение съеденного корма, в консоль должно быть выведено значение: 150.00 граммов.

//    1.	Создайте у класса Cat статическую переменную count, которая увеличивается на 1,
//    \если кошку создали, и убывает на 1, если кошка взорвалась или умерла.
//2.	Создайте статический метод getCount(), который возвращает количество кошек.
//        3.	Отправьте в репозиторий Git коммит с выполненным заданием.
//    Дополнительное задание*
//    Придумайте способ, который поможет проверить, жива ли кошка, на основе значения её веса.
//    Используя это, запретите неживой кошке есть, пить, ходить в туалет, выполняя проверку веса внутри методов,
//    которые изменяют вес кошки.
//
//1.	Создайте в классе Cat константы: «количество глаз», «минимальный вес», «максимальный вес».
//        2.	Создайте enum Color с окрасами кошек.
//        3.	Отправьте в репозиторий Git коммит с выполненным заданием.

//    1.	Сделайте в классе Cat ещё один конструктор, чтобы можно было создать
//    кошку с весом, переданным в конструктор.
//2.	Создайте в главном классе Loader метод генерации котёнка private static Cat getKitten().
// Он должен возвращать кошку с весом 1100.00 грамм с помощью конструктора, в который передаём вес кошки.
// Используйте описание из видеоурока.
//        3.	Создайте три объекта класса Cat в методе main(), используя метод getKitten().

    // 2.	Создайте в классе Cat переменную, в которой хранится окрас. Напишите геттер и сеттер для окраса.

    // 1.	Сделайте метод создания «глубокой» копии кошки. Это означает, что все параметры одной
    // кошки равны параметрам другой. Используйте для этого метод копирования или конструктор копирования.


    public static void main(String[] args) {
        Cat cat = new Cat();
        Cat cat1 = new Cat();
        Cat cat2 = new Cat();
        Cat cat3 = new Cat();
        Cat cat4 = new Cat();
        Cat cat5 = new Cat();

        //Cat cat6 = new Cat(3000.0);
        // System.out.println(cat6.getWeight());

        System.out.println(cat.getWeight());
        System.out.println(cat1.getWeight());
        System.out.println(cat2.getWeight());
        System.out.println(cat3.getWeight());
        System.out.println(cat4.getWeight());
        System.out.println(cat5.getWeight());
        cat.feed(20.0);
        cat1.feed(20.00);
        System.out.println(cat.getWeight());
        System.out.println(cat1.getWeight());

        while (!cat.getStatus().equals("Exploded")) {
            cat.feed(20.00);
        }
        System.out.println(cat.getStatus());

        while (!cat.getStatus().equals("Dead")) {
            cat.meow();
        }
        System.out.println(cat.getStatus());

        cat1.feed(20.0);
        cat1.feed(30.0);
        cat1.feed(80.0);
        System.out.println(cat1.getSummaAmount() + " граммов");

        cat1.pee();
        cat1.pee();
        cat1.pee();
        System.out.println(cat1.getWeight());

        System.out.println(Cat.getCount());

//        cat.pee(); проверяем по условию жива ли кошка
//        cat.feed(10.0);
//        cat.drink(5.0);

        Cat cat6 = Loader.getKitten();
        Cat cat7 = Loader.getKitten();
        Cat cat8 = Loader.getKitten();

        //   System.out.println(Cat.getCount()); проверяем число котов
        // cat.setColor(Color.BLACK); проверка геттеров и сеттеров
        // System.out.println(cat.getColor());
        //  Cat cat9 = new Cat(cat6); создали и проверили копию
        // System.out.println(cat9.getWeight());
    }

    private static Cat getKitten() {
        return new Cat(1100.0);

    }
}